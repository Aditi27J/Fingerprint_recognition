import numpy as np

def extract_minutiae(image):
  """Extracts minutiae points from a fingerprint image.

  Args:
    image: The fingerprint image as a numpy array.

  Returns:
    A matrix of minutiae points, where each row is a minutiae point with the
    following columns:
      minutiae_type: The type of minutiae point, either "ending" or "bifurcation".
      x: The x-coordinate of the minutiae point.
      y: The y-coordinate of the minutiae point.
  """

  thinned_image = _thin_image(image)
  neighbors = _calculate_neighbors(thinned_image)
  minutiae = []
  for x, y in np.ndindex(thinned_image.shape):
    if neighbors[x, y] == 1:
      minutiae.append(["ending", x, y])
    elif neighbors[x, y] > 2:
      minutiae.append(["bifurcation", x, y])
  return np.array(minutiae)

def _thin_image(image):
  """Thins a fingerprint image.

  Args:
    image: The fingerprint image as a numpy array.

  Returns:
    A thinned fingerprint image.
  """

  width, height = image.shape
  thinned_image = np.zeros_like(image)
  for x in range(1, width - 1):
    for y in range(1, height - 1):
      if image[x, y] and not image[x - 1, y] and image[x + 1, y]:
        thinned_image[x, y] = 1
      elif image[x, y] and image[x - 1, y] and not image[x + 1, y]:
        thinned_image[x, y] = 1
      elif image[x, y] and not image[x - 1, y] and not image[x + 1, y]:
        thinned_image[x, y] = 1
  return thinned_image

def _calculate_neighbors(image):
  """Calculates the number of neighbors for each pixel in an image.

  Args:
    image: The image as a numpy array.

  Returns:
    A numpy array of the number of neighbors for each pixel.
  """

  width, height = image.shape
  neighbors = np.zeros_like(image)
  for x in range(1, width - 1):
    for y in range(1, height - 1):
      neighbors[x, y] = (image[x - 1, y] + image[x + 1, y] +
                         image[x, y - 1] + image[x, y + 1])
  return neighbors
